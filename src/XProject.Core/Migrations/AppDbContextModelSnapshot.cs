// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XProject.WebApp.Data;

#nullable disable

namespace XProject.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c9274690-fa05-46d8-8294-b6552b80549b",
                            ConcurrencyStamp = "c9274690-fa05-46d8-8294-b6552b80549b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ea5cfd40-13ff-44bd-bf7b-2937fb23fd54",
                            ConcurrencyStamp = "ea5cfd40-13ff-44bd-bf7b-2937fb23fd54",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "65920599-67ec-45ec-a8fc-0537c0b36d49",
                            RoleId = "c9274690-fa05-46d8-8294-b6552b80549b"
                        },
                        new
                        {
                            UserId = "65920599-67ec-45ec-a8fc-0537c0b36d49",
                            RoleId = "ea5cfd40-13ff-44bd-bf7b-2937fb23fd54"
                        },
                        new
                        {
                            UserId = "89f1ba74-fba0-4b32-b933-1ae347968b0a",
                            RoleId = "ea5cfd40-13ff-44bd-bf7b-2937fb23fd54"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("XProject.Core.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "65920599-67ec-45ec-a8fc-0537c0b36d49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd15d5e5-5c2d-4d4c-b281-1be6703b4d8b",
                            Email = "admin@xproject.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@XPROJECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGyH0O+Q21ixQL62tcE9OanXrSzibOCDQiB4WIA7lBl6kejSd/tKOjYVN6evkXZrzw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "239734e8-deb4-489e-be48-4791062d1f66",
                            TwoFactorEnabled = false,
                            UserName = "admin@xproject.com"
                        },
                        new
                        {
                            Id = "89f1ba74-fba0-4b32-b933-1ae347968b0a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b40cf35-0d76-4f36-94ad-76bb2001a42e",
                            Email = "user@xproject.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER@XPROJECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJaSsi5ST2IPxDm/Mjm+SvZdYq6lxov/hTj4Asvbzh3v0hw0iHE4Y43VGFGIqpEUgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17b45029-b131-4a73-b816-ca8221113827",
                            TwoFactorEnabled = false,
                            UserName = "user@xproject.com"
                        });
                });

            modelBuilder.Entity("XProject.Core.DailyEquipmentLosses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("DailyLosses");
                });

            modelBuilder.Entity("XProject.Core.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FileTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileTitle = "aircraft",
                            IconPath = "Images\\eq\\aircraft.png",
                            Order = 1,
                            Title = "Літаки"
                        },
                        new
                        {
                            Id = 2,
                            FileTitle = "helicopter",
                            IconPath = "Images\\eq\\helicopter.png",
                            Order = 2,
                            Title = "Гвинтокрили"
                        },
                        new
                        {
                            Id = 3,
                            FileTitle = "drone",
                            IconPath = "Images\\eq\\drone.png",
                            Order = 3,
                            Title = "Дрони"
                        },
                        new
                        {
                            Id = 4,
                            FileTitle = "anti-aircraft warfare",
                            IconPath = "Images\\eq\\anti-aircraft-warfare.png",
                            Order = 5,
                            Title = "ППО"
                        },
                        new
                        {
                            Id = 5,
                            FileTitle = "cruise missiles",
                            IconPath = "Images\\eq\\cruise-missiles.png",
                            Order = 5,
                            Title = "Крилаті ракети"
                        },
                        new
                        {
                            Id = 6,
                            FileTitle = "tank",
                            IconPath = "Images\\eq\\tank.png",
                            Order = 6,
                            Title = "Танки"
                        },
                        new
                        {
                            Id = 7,
                            FileTitle = "APC",
                            IconPath = "Images\\eq\\apc.png",
                            Order = 7,
                            Title = "БТР"
                        },
                        new
                        {
                            Id = 8,
                            FileTitle = "field artillery",
                            IconPath = "Images\\eq\\field-artillery.png",
                            Order = 8,
                            Title = "Артилерія"
                        },
                        new
                        {
                            Id = 9,
                            FileTitle = "MLP",
                            IconPath = "Images\\eq\\mlr.png",
                            Order = 9,
                            Title = "РСЗВ"
                        },
                        new
                        {
                            Id = 10,
                            FileTitle = "vehicles and fuel tanks",
                            IconPath = "Images\\eq\\vehicles-and-fuel-tanks.png",
                            Order = 10,
                            Title = "Техніка і цистерни з ПММ"
                        },
                        new
                        {
                            Id = 11,
                            FileTitle = "naval ship",
                            IconPath = "Images\\eq\\naval-ship.png",
                            Order = 11,
                            Title = "Морські кораблі"
                        },
                        new
                        {
                            Id = 12,
                            FileTitle = "special equipment",
                            IconPath = "Images\\eq\\special-equipment.png",
                            Order = 12,
                            Title = "Спец. обладнання"
                        });
                });

            modelBuilder.Entity("XProject.Core.Option", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Key = "start_date",
                            Value = "24.02.2022"
                        },
                        new
                        {
                            Key = "last_update",
                            Value = "1900.01.01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("XProject.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("XProject.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XProject.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("XProject.Core.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XProject.Core.DailyEquipmentLosses", b =>
                {
                    b.HasOne("XProject.Core.EquipmentType", "EquipmentType")
                        .WithMany("DailyEquipmentLosses")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("XProject.Core.EquipmentType", b =>
                {
                    b.Navigation("DailyEquipmentLosses");
                });
#pragma warning restore 612, 618
        }
    }
}
